}
NegBinomR0star<-function(R0=1.5, k){
#R0 needs to be bigger than 1
#R0* = Q'(z) evaluated at prob of extinction z < 1
extprob<-uniroot(NegBinomGen, c(0, 0.99), R0=R0, k=k)$root
R0star<-R0*(1+(R0/k)*(1-extprob))^(-k-1)
}
NegBinomMixR0star<-function(p, R0D,k, delta){
R0A<-R0D + delta
extprob<-uniroot(NegBinomMixtureGen, c(0, 0.99),  p=p, R0D=R0D, k=k, delta=delta)$root
R0star<-p*R0A*(1+(R0A/k)*(1-extprob))^(-k-1)+(1-p)*R0D*(1+(R0D/k)*(1-extprob))^(-k-1)
}
variance.chainNegBinom<-function(R0,k){
#Argument: R0 > 1, dispersion parameter k
#Find variance of chain conditioned on extinction
#do i need a different function for R0<1??
extprob<-uniroot(NegBinomGen, c(0, 0.99), R0=R0, k=k)$root
R0star<-NegBinomR0star(R0,k)
#need Q'"(z) evaluated at prob of extinction z < 1
pgf2atextprob<-(R0^2)*((k+1)/k)*(1+(R0/k)*(1-extprob))^(-k-2)
#Formula from Yan 2008:
varchain<-(extprob*pgf2atextprob+R0star*(1-R0star))/(1-R0star)^3
return(varchain)
}
variance.chainNegBinomMix<-function(p, R0D,k, delta){
#Argument: R0 > 1, R0A = (R0 - p R0^D) /(1-p)
R0A<-R0D + delta
extprob<-uniroot(NegBinomMixtureGen, c(0, 0.99),  p=p, R0D=R0D, k=k, delta=delta)$root
R0star<-NegBinomMixR0star(p,R0D,k, delta)
#need Q'"(z) evaluated at prob of extinction z < 1
pgf2atextprob<-p*(R0A^2)*((k+1)/k)*(1+(R0A/k)*(1-extprob))^(-k-2)+(1-p)*(R0D^2)*((k+1)/k)*(1+(R0D/k)*(1-extprob))^(-k-2)
varchain<-(extprob*pgf2atextprob+R0star*(1-R0star))/(1-R0star)^3
return(varchain)
}
gNNB<-function(n, p, R0D, R0A, k){
#inner function - negative binomial mixture
#find its nth derivative
q1 <- (1+R0A/k)
q2 <- (1+R0D/k)
if(n==1) {
gn<-p*R0A*q1^(-k-1)+(1-p)*R0D*q2^(-k-1)
}
else if (n==2){
gn<-p*((R0A^2)/k)*(k+1)*q1^(-k-2)+(1-p)*((R0D^2)/k)*(k+1)*q2^(-k-2)
}
else if (n>2) {
pvec <- (k+1):(k+n-1)
ppvec<-prod(pvec)
#gn<-p*k*ppvec*((R0A/k)^n)*(1+R0A/k)^(-n-k)+(1-p)*(k)*ppvec*((R0D/k)^n)*(1+R0D/k)^(-n-k)
gn<-p*((R0A/k)^n)*(k*ppvec)*q1^(-k-n)+(1-p)*((R0D/k)^n)*(k*ppvec)*q2^(-k-n)
}
return(gn)
}
fNrNB<-function(n, r, p, R0D, R0A, k){
#outer function = pgf at s = 0
#n is the power (a+b)^n, a = p*(1+R0A/k)^(-k), b=(1-p)*(1+R0D/k)^(-k)
#r is the derivative required, r = 1, 2, ..., n-1
#pgf of neg binom at s=0 is (1+R0/k)^(-k)
fn<-(factorial(n)/factorial(n-r))*(p*(1+R0A/k)^(-k) +(1-p)*(1+R0D/k)^(-k))^(n-r)
}
nbinomchain<-function(j, R0, k){
#cluster size distribution for negative binomial model
#formula from Blumberg et al. 2013
#Arguments: j=chain size, R0=mean, k=dispersion
a<-R0/k
x<-j-1
y<-(a^x)/(1+a)^(k*j+x)
g<-gamma(k*j+x)/(gamma(k*j)*gamma(j+1))
return(g*y)
}
#prob cluster <=5
#better to find from the other matrix first?
#filter chains<=5
nbinommixturechain<-function(nend, p, R0D,k, delta){
#generate cluster size distribution for a nbinom mixture,
#clusters of size 1, 2, ...., nend
R0A<-R0D+delta
csize3end<-numeric(nend-2)
for(n in 3:nend){
#for loop to calculate chain sizes greater than 2
nvec<-1:(n-1)
# gvec<-gNGeo(nvec, p, R0D, R0A) #need n-1 g derivatives
#compute the inner function 1, 2,..,n-1 derivatives of inner function
gvec<-numeric(length(nvec))
for(i in 1:length(nvec)) gvec[i]<-gNNB(nvec[i],  p, R0D, R0A,k) #if statement so have to fill one by one
#The n-1th derivative of (a+b)^n evaluated at s = 0:
#use the derivatives to compute the  Bell polynomials vector of length n-1.
#Faa Di Bruno's formula = sum of outer function * Bell polys of the inner function derivatives
x1<-fNrNB(n, 1, p, R0D, R0A,k)*BellB(n-1,1,gvec) #r=1
for(i in 2:(n-1)) x1<-x1+fNrNB(n, i, p, R0D, R0A,k)*BellB(n-1,i,head(gvec,-(i-1)))
#vector of P(chain size = n)
csize3end[n-2]<-x1/factorial(n)
rm(x1)
}
#prob cluster size = 1 = Prob(cases=0)
csize1<-(p)*(1+R0A/k)^(-k)+(1-p)*(1+R0D/k)^(-k)
#prob cluster size = 2
csize2<-fNrNB(2, 1, p, R0D, R0A,k)*gNNB(1,p,R0D, R0A,k)/2
#chain size probabilities
csizemix<-c(csize1, csize2, csize3end)
return(csizemix)
}
ProbabilityChainSizeLessthanEqualC<-function(C, chainsizes){
#chainsizes is a column vector of chain sizes
#C =1, 2, ...,length(chainsizes)
prob<-sum(chainsizes[1:C])
}
p<-seq(0.01, 1, 0.01)
R0D<-1.1
dval<-seq(0.01, 5, length.out=length(p))
kval<-0.5
clusterbig10<-matrix(NA, nrow=length(p), ncol=length(dval))
for (i in 1:length(p)){
for(j in 1:length(dval)){
clusterbig10[i,j]<-1-ProbabilityChainSizeLessthanEqualC(C=10, nbinommixturechain(nend=10, p=p[i], R0D=R0D,k=kval, delta=dval[j]))
}
}
control<-data.frame(p=p, additional_contacts=dval[1],ProbabilityClusterBigger10=clusterbig10[,1])
for (j in 2:length(dval)){
control<-bind_rows(control, data.frame(p=p, additional_contacts=dval[j],ProbabilityClusterBiggerThan10=clusterbig10[,j]) )
}
ggplot(data = control) +
geom_tile(mapping = aes(x = p, y = additional_contacts, fill=ProbabilityClusterBigger10))
pval<-0.1
R0Dval<-seq(1.1, 2, length.out=100)
dval<-seq(0.01, 5, length.out=100)
kval<-0.5
clusterbig10p<-matrix(NA, nrow=length(R0Dval), ncol=length(dval))
for (i in 1:length(R0Dval)){
for(j in 1:length(dval)){
clusterbig10p[i,j]<-1-ProbabilityChainSizeLessthanEqualC(C=10, nbinommixturechain(nend=10, p=pval, R0D=R0Dval[i],k=kval, delta=dval[j]))
}
}
View(control)
controlp<-data.frame(R0D=R0Dval, delta=dval[1],ProbClusterBigger10=clusterbig10p[,1])
for (j in 2:length(dval)){
controlp<-bind_rows(controlp, data.frame(R0D=R0Dval, additional_contacts=dval[j],ProbabilityClusterBigger10=clusterbig10p[,j]) )
}
ggplot(data = controlp) +
geom_tile(mapping = aes(x = R0D, y = additional_contacts, fill=ProbabilityClusterBigger10))
pval<-0.1
R0Dval<-seq(1.1, 2, length.out=100)
dval<-seq(0.01, 5, length.out=100)
kval<-0.5
clusterbig10p<-matrix(NA, nrow=length(R0Dval), ncol=length(dval))
for (i in 1:length(R0Dval)){
for(j in 1:length(dval)){
clusterbig10p[i,j]<-1-ProbabilityChainSizeLessthanEqualC(C=10, nbinommixturechain(nend=10, p=pval, R0D=R0Dval[i],k=kval, delta=dval[j]))
}
}
controlp<-data.frame(R0D=R0Dval, delta=dval[1],ProbabilityClusterBigger10=clusterbig10p[,1])
for (j in 2:length(dval)){
controlp<-bind_rows(controlp, data.frame(R0D=R0Dval, additional_contacts=dval[j],ProbabilityClusterBigger10=clusterbig10p[,j]) )
}
ggplot(data = controlp) +
geom_tile(mapping = aes(x = R0D, y = additional_contacts, fill=ProbabilityClusterBigger10))
control<-data.frame(p=p, additional_contacts=dval[1],ProbabilityClusterBigger10=clusterbig10[,1])
for (j in 2:length(dval)){
control<-bind_rows(control, data.frame(p=p, additional_contacts=dval[j],ProbabilityClusterBigger10=clusterbig10[,j]) )
}
ggplot(data = control) +
geom_tile(mapping = aes(x = p, y = additional_contacts, fill=ProbabilityClusterBigger10))
controlp<-data.frame(R0D=R0Dval, delta=dval[1],ProbabilityClusterBigger10=clusterbig10p[,1])
for (j in 2:length(dval)){
controlp<-bind_rows(controlp, data.frame(R0D=R0Dval, additional_contacts=dval[j],ProbabilityClusterBigger10=clusterbig10p[,j]) )
}
ggplot(data = controlp) +
geom_tile(mapping = aes(x = R0D, y = additional_contacts, fill=ProbabilityClusterBigger10))
clusterbig10p[1,2]
clusterbig10[1,2]
clusterbig10[2,1]
clusterbig10[3,1]
clusterbig10[13,1]
View(controlp)
controlp<-data.frame(R0D=R0Dval, additional_contacts=dval[1],ProbabilityClusterBigger10=clusterbig10p[,1])
for (j in 2:length(dval)){
controlp<-bind_rows(controlp, data.frame(R0D=R0Dval, additional_contacts=dval[j],ProbabilityClusterBigger10=clusterbig10p[,j]) )
}
ggplot(data = controlp) +
geom_tile(mapping = aes(x = R0D, y = additional_contacts, fill=ProbabilityClusterBigger10))
ggplot(controlp, aes(x = R0D, y = additional_contacts, z=ProbabilityClusterBigger10)) +
stat_contour(geom = “polygon”, aes(fill = ..level..)) +
ggplot(controlp, aes(x = R0D, y = additional_contacts, z=ProbabilityClusterBigger10)) +
stat_contour() +
geom_tile(aes(fill = ProbabilityClusterBigger10))
ggplot(controlp, aes(x = R0D, y = additional_contacts, z=ProbabilityClusterBigger10)) +
stat_contour() +
ggplot(controlp, aes(x = R0D, y = additional_contacts, z=ProbabilityClusterBigger10)) +
stat_contour()
ggplot(controlp, aes(x = R0D, y = additional_contacts, z=ProbabilityClusterBigger10)) +
stat_contour()
ggplot() +
geom_tile(data = controlp, aes(x = R0D, y = additional_contacts, z=ProbabilityClusterBigger10,fill=ProbabilityClusterBigger10))) +
ggplot() +
geom_tile(data = controlp, aes(x = R0D, y = additional_contacts, z=ProbabilityClusterBigger10,fill=ProbabilityClusterBigger10)) +
geom_contour(color = “white”, alpha = 0.5)
ggplot() +
geom_tile(data = controlp, aes(x = R0D, y = additional_contacts, z=ProbabilityClusterBigger10,fill=ProbabilityClusterBigger10)) +
geom_contour(color = “white”)
ggplot() +
geom_tile(data = controlp, aes(x = R0D, y = additional_contacts, fill=ProbabilityClusterBigger10)) +
geom_contour(color = “white”)
ggplot(controlp, aes(x = R0D, y = additional_contacts)) +
geom_contour(aes(z = ProbabilityClusterBigger10, colour = ..level..)) +
theme_void() +
scale_color_continuous("Altitude")
ggplot(controlp, aes(x = R0D, y = additional_contacts)) +
geom_contour(aes(z = ProbabilityClusterBigger10, colour = ..level..)) +
scale_color_continuous("ProbabilityClusterBigger10")
ggplot(controlp, aes(x = R0D, y = additional_contacts)) +
geom_contour(aes(z = ProbabilityClusterBigger10, colour = ..level..)) +
scale_color_continuous("ProbabilityClusterBigger10")+
geom_tile(mapping = aes(x = R0D, y = additional_contacts, fill=ProbabilityClusterBigger10))
ggplot(controlp, aes(x = R0D, y = additional_contacts)) +
geom_contour(aes(z = ProbabilityClusterBigger10, colour = ..level..)) +
scale_color_continuous("ProbabilityClusterBigger10")
ggplot(control, aes(x = p, y = additional_contacts)) +
geom_contour(aes(z = ProbabilityClusterBigger10, colour = ..level..)) +
scale_color_continuous("ProbabilityClusterBigger10")
p<-seq(0.01, 1, 0.01)
R0D<-0.8
dval<-seq(0.01, 5, length.out=length(p))
kval<-0.5
clusterbig10<-matrix(NA, nrow=length(p), ncol=length(dval))
for (i in 1:length(p)){
for(j in 1:length(dval)){
clusterbig10[i,j]<-1-ProbabilityChainSizeLessthanEqualC(C=10, nbinommixturechain(nend=10, p=p[i], R0D=R0D,k=kval, delta=dval[j]))
}
}
control<-data.frame(p=p, additional_contacts=dval[1],ProbabilityClusterBigger10=clusterbig10[,1])
for (j in 2:length(dval)){
control<-bind_rows(control, data.frame(p=p, additional_contacts=dval[j],ProbabilityClusterBigger10=clusterbig10[,j]) )
}
ggplot(data = control) +
geom_tile(mapping = aes(x = p, y = additional_contacts, fill=ProbabilityClusterBigger10))
ggplot(control, aes(x = p, y = additional_contacts)) +
geom_contour(aes(z = ProbabilityClusterBigger10, colour = ..level..)) +
scale_color_continuous("ProbabilityClusterBigger10")
pval<-0.1
R0Dval<-seq(0.8, 2, length.out=100)
dval<-seq(0.01, 5, length.out=100)
kval<-0.5
clusterbig10p<-matrix(NA, nrow=length(R0Dval), ncol=length(dval))
for (i in 1:length(R0Dval)){
for(j in 1:length(dval)){
clusterbig10p[i,j]<-1-ProbabilityChainSizeLessthanEqualC(C=10, nbinommixturechain(nend=10, p=pval, R0D=R0Dval[i],k=kval, delta=dval[j]))
}
}
controlp<-data.frame(R0D=R0Dval, additional_contacts=dval[1],ProbabilityClusterBigger10=clusterbig10p[,1])
for (j in 2:length(dval)){
controlp<-bind_rows(controlp, data.frame(R0D=R0Dval, additional_contacts=dval[j],ProbabilityClusterBigger10=clusterbig10p[,j]) )
}
ggplot(data = controlp) +
geom_tile(mapping = aes(x = R0D, y = additional_contacts, fill=ProbabilityClusterBigger10))
ggplot(controlp, aes(x = R0D, y = additional_contacts)) +
geom_contour(aes(z = ProbabilityClusterBigger10, colour = ..level..)) +
scale_color_continuous("ProbabilityClusterBigger10")
p<-seq(0.01, 1, 0.01)
R0D<-0.8
dval<-seq(0.01, 5, length.out=length(p))
kval<-0.5
clusterbig10<-matrix(NA, nrow=length(p), ncol=length(dval))
for (i in 1:length(p)){
for(j in 1:length(dval)){
clusterbig10[i,j]<-1-ProbabilityChainSizeLessthanEqualC(C=10, nbinommixturechain(nend=10, p=p[i], R0D=R0D,k=kval, delta=dval[j]))
}
}
control<-data.frame(p=p, additional_contacts=dval[1],ProbabilityClusterBigger10=clusterbig10[,1])
for (j in 2:length(dval)){
control<-bind_rows(control, data.frame(p=p, additional_contacts=dval[j],ProbabilityClusterBigger10=clusterbig10[,j]) )
}
ggplot(data = control) +
geom_tile(mapping = aes(x = p, y = additional_contacts, fill=ProbabilityClusterBigger10))
ggplot(control, aes(x = p, y = additional_contacts)) +
geom_contour(aes(z = ProbabilityClusterBigger10, colour = ..level..)) +
scale_color_continuous("ProbabilityClusterBigger10")
pval<-0.1
R0Dval<-seq(1.1, 2, length.out=100)
dval<-seq(0.01, 5, length.out=100)
kval<-0.5
clusterbig10p<-matrix(NA, nrow=length(R0Dval), ncol=length(dval))
for (i in 1:length(R0Dval)){
for(j in 1:length(dval)){
clusterbig10p[i,j]<-1-ProbabilityChainSizeLessthanEqualC(C=10, nbinommixturechain(nend=10, p=pval, R0D=R0Dval[i],k=kval, delta=dval[j]))
}
}
controlp<-data.frame(R0D=R0Dval, additional_contacts=dval[1],ProbabilityClusterBigger10=clusterbig10p[,1])
for (j in 2:length(dval)){
controlp<-bind_rows(controlp, data.frame(R0D=R0Dval, additional_contacts=dval[j],ProbabilityClusterBigger10=clusterbig10p[,j]) )
}
ggplot(data = controlp) +
geom_tile(mapping = aes(x = R0D, y = additional_contacts, fill=ProbabilityClusterBigger10))
ggplot(controlp, aes(x = R0D, y = additional_contacts)) +
geom_contour(aes(z = ProbabilityClusterBigger10, colour = ..level..)) +
scale_color_continuous("ProbabilityClusterBigger10")
p<-seq(0.01, 1, 0.01)
R0D<-1.1
dval<-seq(0.01, 5, length.out=length(p))
kval<-0.5
clusterbig10<-matrix(NA, nrow=length(p), ncol=length(dval))
for (i in 1:length(p)){
for(j in 1:length(dval)){
clusterbig10[i,j]<-1-ProbabilityChainSizeLessthanEqualC(C=10, nbinommixturechain(nend=10, p=p[i], R0D=R0D,k=kval, delta=dval[j]))
}
}
control<-data.frame(p=p, additional_contacts=dval[1],ProbabilityClusterBigger10=clusterbig10[,1])
for (j in 2:length(dval)){
control<-bind_rows(control, data.frame(p=p, additional_contacts=dval[j],ProbabilityClusterBigger10=clusterbig10[,j]) )
}
ggplot(data = control) +
geom_tile(mapping = aes(x = p, y = additional_contacts, fill=ProbabilityClusterBigger10))
ggplot(control, aes(x = p, y = additional_contacts)) +
geom_contour(aes(z = ProbabilityClusterBigger10, colour = ..level..)) +
scale_color_continuous("ProbabilityClusterBigger10")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
NegBinmixturedeviate<- function(m, p, R0D, k, delta) {
#Returns a vector of m Poisson mixture deviates
# Assumes a finite mixture of two Poisson distributions, with prob p and 1-p respectively, 0<p<1
#1 = success = direct contact
#0 = failure = aerosol
#rbinom = one bernoulli trial for direct transmission
#n = number of observations = 1
#size = number of trials =1 (bernoulli) per observation
#if success, deviate = rpois(R0D) otherwise aerosol
R0A<-R0D +delta
deviate<-numeric(m) #number of deviates
for(i in 1:m){
deviate[i]<-ifelse(rbinom(1, size=1, prob = p)==1, rnbinom(1,R0A, k), rnbinom(1,R0D, k))
}
return(deviate)
}
NegBinbranchw <- function(R0,k) {
#returns n = the number of generations that it takes to have a cluster greater than 50 from a Poisson mixture offspring distribution
n<-1
z <- c(1,rep(0,n)) #n = number of generations after generation 0
#one infected case in generation 0
cluster<-sum(z)
while(cluster<50){
i<-n+1
z[i] <- sum(rnbinom(z[i-1],R0,k))
cluster<-cluster+z[i]
n<-n+1
if(z[i]==0){
break #break out of loop of cluster dies out
}
}
#return(c(z, cluster, n))
if(cluster<50)
{n<-NA} #prob of extinction zinfinity predicts proportion of clusters that die out
return(n)
}
NegBinmixturebranchw<- function(p, R0D, k, delta) {
#returns n = the number of generations that it takes to have a cluster greater than 50 from a Poisson mixture offspring distribution
R0A<-R0D+delta
n<-1 #generation time
z <- c(1,rep(0,n))
#one infected case in generation 0
cluster<-sum(z)
while(cluster<50){
#number of poisson rvs needed per case = z[i-1], then add together to get the number of new infections in that generation
i<-n+1
z[i]<-ifelse(z[i-1]==0, 0, sum(NegBinmixturedeviate(z[i-1], p=p, R0D=R0D, k=k, delta=delta)))
cluster<-cluster+z[i]
n<-n+1
if(z[i]==0){
break #if no cases break out of while loop
}
}
#		return(c(z, cluster, n)) as a check
if(cluster<50)
{n<-NA}
return(n)
}
Poissonmixturebranchw2<- function(p, R0D, R0A) {
#returns n = the number of generations that it takes to have a cluster greater than 50 from a Poisson mixture offspring distribution
n<-1 #generation time
z <- c(1,rep(0,n))
#one infected case in generation 0
cluster<-sum(z)
while(cluster<50){
#number of poisson rvs needed per case = z[i-1], then add together to get the number of new infections in that generation
i<-n+1
z[i] <- sum(rmixture(z[i-1], probs = c(p, 1-p), models = expression(rpois(R0D), rpois(R0A))))#params$R0D
cluster<-cluster+z[i]
n<-n+1
if(z[i]==0){
break #if no cases break out of while loop
}
}
#		return(c(z, cluster, n)) as a check
if(cluster<50)
{n<-NA}
return(n)
}
#R0=4.5
nsims<-1000 #use while loops
kval<-0.5
R0<-2
R0D<-1.1
poissgen2<-numeric(nsims)
for(i in 1:length(poissgen2)) {
poissgen2[i]<-NegBinbranchw(R0, kval)
}
#vary p =0.05, 0.1, 0.2
poissmixgen2<-numeric(nsims)
for(i in 1:length(poissmixgen2)) poissmixgen2[i]<-NegBinmixturebranchw(p=0.05, R0D, k, delta=(R0-R0D)/0.05)
#R0=4.5
nsims<-1000 #use while loops
kval<-0.5
R0<-2
R0D<-1.1
poissgen2<-numeric(nsims)
for(i in 1:length(poissgen2)) {
poissgen2[i]<-NegBinbranchw(R0, kval)
}
#vary p =0.05, 0.1, 0.2
poissmixgen2<-numeric(nsims)
for(i in 1:length(poissmixgen2)) poissmixgen2[i]<-NegBinmixturebranchw(p=0.05, R0D, k=kval, delta=(R0-R0D)/0.05)
poissmixgen3<-numeric(nsims)
for(i in 1:length(poissmixgen3)) poissmixgen3[i]<-NegBinmixturebranchw(p=0.1, R0D, k=kval, delta=(R0-R0D)/0.1)
poissmixgen4<-numeric(nsims)
for(i in 1:length(poissmixgen4)) poissmixgen4[i]<-NegBinmixturebranchw(p=0.15, R0D, k=kval, delta=(R0-R0D)/0.15)
check<-c(length(na.omit(poissmixgen2)),length(na.omit(poissmixgen3)), length(na.omit(poissmixgen4)))
poissgen2<-na.omit(poissgen2)
poissmixgen2<-na.omit(poissmixgen2)
poissmixgen3<-na.omit(poissmixgen3)
poissmixgen4<-na.omit(poissmixgen4)
poissmixgen2
check
nsims2<-round(min(check),digits=-2) #round to the nearest 100
pval=rep(c("0.05", "0.1","0.15"), each=2*nsims2)
model=rep(c("baseline","mixture"),each=nsims2)
gentime<-c(poissgen2[1:nsims2], poissmixgen2[1:nsims2], poissgen2[1:nsims2],poissmixgen3[1:nsims2], poissgen2[1:nsims2], poissmixgen4[1:nsims2])
data2=data.frame(p, model ,  GenerationTime=gentime)
# grouped boxplot
p<-ggplot(data2, aes(x=p, y=GenerationTime, fill=model)) +
geom_boxplot()
p
#ggsave("gentimeR0.pdf", p, height=4, width=5)
nsims2<-round(min(check),digits=-2) #round to the nearest 100
pval=rep(c("0.05", "0.1","0.15"), each=2*nsims2)
model=rep(c("baseline","mixture"),each=nsims2)
gentime<-c(poissgen2[1:nsims2], poissmixgen2[1:nsims2], poissgen2[1:nsims2],poissmixgen3[1:nsims2], poissgen2[1:nsims2], poissmixgen4[1:nsims2])
data2=data.frame(p=pval, model ,  GenerationTime=gentime)
# grouped boxplot
p<-ggplot(data2, aes(x=p, y=GenerationTime, fill=model)) +
geom_boxplot()
p
#ggsave("gentimeR0.pdf", p, height=4, width=5)
#R0=4.5
nsims<-10000 #use while loops
kval<-0.5
R0<-2
R0D<-1.1
poissgen2<-numeric(nsims)
for(i in 1:length(poissgen2)) {
poissgen2[i]<-NegBinbranchw(R0, kval)
}
#vary p =0.05, 0.1, 0.2
poissmixgen2<-numeric(nsims)
for(i in 1:length(poissmixgen2)) poissmixgen2[i]<-NegBinmixturebranchw(p=0.05, R0D, k=kval, delta=(R0-R0D)/0.05)
poissmixgen3<-numeric(nsims)
for(i in 1:length(poissmixgen3)) poissmixgen3[i]<-NegBinmixturebranchw(p=0.1, R0D, k=kval, delta=(R0-R0D)/0.1)
poissmixgen4<-numeric(nsims)
for(i in 1:length(poissmixgen4)) poissmixgen4[i]<-NegBinmixturebranchw(p=0.15, R0D, k=kval, delta=(R0-R0D)/0.15)
check<-c(length(na.omit(poissmixgen2)),length(na.omit(poissmixgen3)), length(na.omit(poissmixgen4)))
poissgen2<-na.omit(poissgen2)
poissmixgen2<-na.omit(poissmixgen2)
poissmixgen3<-na.omit(poissmixgen3)
poissmixgen4<-na.omit(poissmixgen4)
nsims2<-round(min(check),digits=-2) #round to the nearest 100
pval=rep(c("0.05", "0.1","0.15"), each=2*nsims2)
model=rep(c("baseline","mixture"),each=nsims2)
gentime<-c(poissgen2[1:nsims2], poissmixgen2[1:nsims2], poissgen2[1:nsims2],poissmixgen3[1:nsims2], poissgen2[1:nsims2], poissmixgen4[1:nsims2])
data2=data.frame(p=pval, model ,  GenerationTime=gentime)
# grouped boxplot
p<-ggplot(data2, aes(x=p, y=GenerationTime, fill=model)) +
geom_boxplot()
p
#ggsave("gentimeR0.pdf", p, height=4, width=5)
check
nsims2
floormin(check),digits=-2)
floor(min(check),digits=-2)
floor(min(check))
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("ellipsis")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("tidyverse",dependencies = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("tidyverse")
#knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
setwd("~/oregan-heterogeneous-transmission")
library(tidyverse)
library(tidyverse)
library(tools, lib.loc = "C:/Program Files/R/R-4.1.1/library")
library(tidyverse)
